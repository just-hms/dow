name: release

on:
  push:
    branches:
      - main

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check if the Version changed
      id: version
      run:
        CURRENT_VERSION=$(grep -oP 'Version\s*=\s*"\K[^\"]+' internal/version.go)
        echo "::set-output name=current_version::$CURRENT_VERSION"

        PREVIOUS_VERSION=$(git show ${{ github.event.before }}:internal/version.go | grep -oP 'Version\s*=\s*"\K[^\"]+')
        echo "::set-output name=previous_version::$PREVIOUS_VERSION"

    - name: Create release
      if: steps.version.outputs.current_version != steps.version.outputs.previous_version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CURRENT_VERSION=${{ steps.current-version.outputs.current_version }}
        
        # Create a new tag
        git tag -a $CURRENT_VERSION -m "Release $CURRENT_VERSION"
        git push origin $CURRENT_VERSION

        # Create a new release on GitHub
        curl -s -X POST https://api.github.com/repos/${{ github.repository }}/releases \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d @- <<EOF
        {
          "tag_name": "$CURRENT_VERSION",
          "target_commitish": "${{ github.sha }}",
          "name": "$CURRENT_VERSION",
          "body": "Automated release for version $CURRENT_VERSION.",
          "draft": false,
          "prerelease": false
        }
        EOF
